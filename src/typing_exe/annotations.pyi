from typing import Union, Type, Any
from typing_extensions import TypeAlias


def is_typehint(value) -> bool: ...


class _Assert:
    def __getitem__(self, callables): ...
    def enforce(self, fct: callable, parameter: Any, parameter_name: str): ...


class _Modify:
    def __getitem__(self, callables): ...
    def enforce(self, parameter: Any): ...


class _Sequence:
    def __getitem__(self, hints): ...
    def enforce(self, fct, parameter, parameter_name): ...
    def parse(self, hints): ...
    @staticmethod
    def is_checks_or_hooks(item): ...


class _HintsCreator:
    def __init__(self, _class: Union[Type[_Assert], Type[_Modify]]): ...
    def __getitem__(self, item) -> Union[_Assert, _Modify]: ...


Assert: TypeAlias  = _HintsCreator(_Assert)
Modify: TypeAlias = _HintsCreator(_Modify)
Sequence: TypeAlias = _HintsCreator(_Sequence)